"""
NEPEM Certificados - Interface de Linha de Comando
Ferramenta para gera√ß√£o de certificados em lote.
"""

import os
import sys
import random

from app import themes

# Suprimir avisos verbosos do GLib no Windows
os.environ['G_MESSAGES_DEBUG'] = ''
os.environ['GLIB_SILENCE_DEPRECATION'] = '1'
os.environ['PYTHONWARNINGS'] = 'ignore'

# Redirecionar stderr temporariamente para suprimir avisos do GTK/GLib
import warnings
warnings.filterwarnings("ignore", category=UserWarning)

import click
import typer
from rich.console import Console
from rich.panel import Panel
from rich.table import Table
from rich.progress import Progress, SpinnerColumn, TextColumn, BarColumn, TaskProgressColumn
from rich.markdown import Markdown
from rich.syntax import Syntax
from rich import box
from rich.align import Align
from rich.layout import Layout
from rich.text import Text
from pathlib import Path
import questionary
from pyfiglet import Figlet
import pandas as pd
import time
import random
import string
from datetime import datetime

# Configurar questionary para reduzir verbosidade no Windows
if sys.platform.startswith('win'):
    # Suprimir avisos do GLib/GTK no Windows
    from contextlib import redirect_stderr
    from io import StringIO

# Wrapper functions para questionary que suprimem stderr
def quiet_select(message, choices, **kwargs):
    """Wrapper para questionary.select que suprime mensagens de erro."""
    try:
        if sys.platform.startswith('win'):
            with redirect_stderr(StringIO()):
                return questionary.select(message, choices, **kwargs).ask()
        else:
            return questionary.select(message, choices, **kwargs).ask()
    except Exception as e:
        console.print(f"[red]Erro ao exibir sele√ß√£o: {e}[/red]")
        return choices[0] if choices else None

def quiet_text(message, **kwargs):
    """Wrapper para questionary.text que suprime mensagens de erro."""
    try:
        if sys.platform.startswith('win'):
            with redirect_stderr(StringIO()):
                return questionary.text(message, **kwargs).ask()
        else:
            return questionary.text(message, **kwargs).ask()
    except Exception as e:
        console.print(f"[red]Erro ao solicitar texto: {e}[/red]")
        return kwargs.get('default', "")

def quiet_confirm(message, **kwargs):
    """Wrapper para questionary.confirm que suprime mensagens de erro."""
    try:
        if sys.platform.startswith('win'):
            with redirect_stderr(StringIO()):
                return questionary.confirm(message, **kwargs).ask()
        else:
            return questionary.confirm(message, **kwargs).ask()
    except Exception as e:
        console.print(f"[red]Erro ao solicitar confirma√ß√£o: {e}[/red]")
        return kwargs.get('default', False)

def quiet_checkbox(message, choices, **kwargs):
    """Wrapper para questionary.checkbox que suprime mensagens de erro."""
    try:
        if sys.platform.startswith('win'):
            with redirect_stderr(StringIO()):
                return questionary.checkbox(message, choices, **kwargs).ask()
        else:
            return questionary.checkbox(message, choices, **kwargs).ask()
    except Exception as e:
        console.print(f"[red]Erro ao exibir checkbox: {e}[/red]")
        return []

def quiet_path(message, **kwargs):
    """Wrapper para questionary.path que suprime mensagens de erro."""
    try:
        if sys.platform.startswith('win'):
            with redirect_stderr(StringIO()):
                return questionary.path(message, **kwargs).ask()
        else:
            return questionary.path(message, **kwargs).ask()
    except Exception as e:
        console.print(f"[red]Erro ao solicitar caminho: {e}[/red]")
        return kwargs.get('default', "")

# Importa√ß√£o dos m√≥dulos da aplica√ß√£o
from app.csv_manager import CSVManager
from app.template_manager import TemplateManager
from app.pdf_generator import PDFGenerator
from app.field_mapper import FieldMapper
from app.zip_exporter import ZipExporter
from app.connectivity_manager import ConnectivityManager
from app.parameter_manager import ParameterManager
from app.theme_manager import ThemeManager
from app.authentication_manager import AuthenticationManager
from app.certificate_service import CertificateService # Added CertificateService import

# Configura√ß√£o do console Rich
console = Console()

# Vers√£o do aplicativo
APP_VERSION = "1.1.0"

# Inicializa√ß√£o dos gerenciadores
csv_manager = CSVManager()
template_manager = TemplateManager()
pdf_generator = PDFGenerator()
field_mapper = FieldMapper()
zip_exporter = ZipExporter()
connectivity_manager = ConnectivityManager()
parameter_manager = ParameterManager()
theme_manager = ThemeManager()
auth_manager = AuthenticationManager()
certificate_service = CertificateService() # Instantiated CertificateService


def check_connection_status():
    """Verifica o status de conex√£o com servidor remoto."""
    # Usa o connectivity_manager para obter o status real
    conn_info = connectivity_manager.get_connection_status()
    return conn_info["status"]


def print_header():
    """Exibe o cabe√ßalho da aplica√ß√£o com logo e informa√ß√µes de status."""
    console.clear()
    f = Figlet(font="slant")
    console.print(f.renderText("NEPEM Cert"), style="bold blue")
    
    # Divis√£o para as caixas de informa√ß√£o lado a lado (lado a lado sem layout aninhado)
    version_panel = Panel(
        f"[bold]Vers√£o:[/bold] {APP_VERSION}",
        title="Informa√ß√µes do Sistema",
        border_style="green",
        height=3,
        padding=(0, 2)
    )
    
    connection_status = check_connection_status()
    status_color = {
        "Conectado": "green",
        "Desconectado": "red",
        "Aguardando": "yellow"
    }.get(connection_status, "yellow")
    connection_panel = Panel(
        f"[bold]Status:[/bold] [{status_color}]{connection_status}[/{status_color}]",
        title="Conex√£o com Servidor",
        border_style=status_color,
        height=3,
        padding=(0, 2)
    )
    
    # Exibe os pain√©is lado a lado
    console.print(Align.center(version_panel, vertical="top"), connection_panel)
    
    # Reduz espa√ßo entre pain√©is e menu
    console.print("\n[bold cyan]Gerador de Certificados em Lote[/bold cyan]")
    console.print("[dim]Use os comandos abaixo para gerenciar seus certificados.[/dim]")
    
    # Exibir indicador de modo debug no rodap√© quando estiver ativado
    if parameter_manager.get_debug_mode():
        console.print("\n[bold red]üêõ [DEBUG MODE ATIVADO] üêõ[/bold red]")


def main_menu():
    """Exibe o menu principal da aplica√ß√£o."""
    print_header()
    
    # Lista b√°sica de op√ß√µes do menu
    menu_options = [
        "üîñ Gerar Certificados",
        "üé® Gerenciar Templates",
        "‚öôÔ∏è Configura√ß√µes",
        "üîÑ Sincroniza√ß√£o e Conectividade",
        "‚ùì Ajuda",
        "üö™ Sair"
    ]
    
    # Adicionar op√ß√µes de debug se o modo debug estiver ativado
    debug_mode = parameter_manager.get_debug_mode()
    if debug_mode:
        # Inserir as op√ß√µes de debug antes da Ajuda
        menu_options.insert(-2, "üêõ DEBUG: Comparar temas")
        menu_options.insert(-2, "üêõ DEBUG: Verificar sistema")
    
    choice = quiet_select(
        "Selecione uma op√ß√£o:",
        choices=menu_options,
        use_indicator=True,
        style=get_menu_style()
    )
    
    if choice == "üîñ Gerar Certificados":
        generate_certificates_menu()
    elif choice == "üé® Gerenciar Templates":
        manage_templates_menu()
    elif choice == "‚öôÔ∏è Configura√ß√µes":
        settings_menu()
    elif choice == "üîÑ Sincroniza√ß√£o e Conectividade":
        connectivity_menu()
    elif choice == "üêõ DEBUG: Comparar temas":
        debug_compare_themes()
    elif choice == "üêõ DEBUG: Verificar sistema":
        debug_system_check()
    elif choice == "‚ùì Ajuda":
        show_help()
    elif choice == "üö™ Sair":
        console.print("[bold green]Obrigado por usar o NEPEM Cert. At√© logo![/bold green]")
        return False
    
    return True


def generate_certificates_menu():
    """Menu para gera√ß√£o de certificados."""
    console.clear()
    console.print("[bold blue]== Gera√ß√£o de Certificados em Lote ==[/bold blue]\n")
    # Selecionar arquivo CSV
    csv_path = quiet_path(
        "Selecione o arquivo CSV com nomes dos participantes:",
        validate=lambda path: os.path.exists(path) and path.endswith('.csv')
    )
    
    if not csv_path:
        console.print("[yellow]Opera√ß√£o cancelada.[/yellow]")
        return
    # Verificar se o CSV tem cabe√ßalho
    has_header = quiet_confirm("O arquivo CSV possui linha de cabe√ßalho?")

    with console.status("[bold green]Carregando dados do CSV..."):
        try:
            console.print(f"[dim]Tentando carregar CSV de: {csv_path}[/dim]")
            console.print(f"[dim]Arquivo com cabe√ßalho? {has_header}[/dim]")
            
            try:                # Tentativa com diferentes separadores caso o padr√£o falhe
                separators = [',', ';', '\t', '|']
                encoding_options = ['utf-8', 'latin1', 'cp1252']
                
                success = False
                
                for encoding in encoding_options:
                    for sep in separators:
                        try:
                            console.print(f"[dim]Tentando ler CSV com separador '{sep}' e encoding '{encoding}'...[/dim]")
                            
                            if has_header:
                                console.print("[dim]Lendo CSV com cabe√ßalho...[/dim]")
                                df = pd.read_csv(csv_path, sep=sep, encoding=encoding)
                                console.print(f"[dim]Colunas encontradas: {', '.join(df.columns)}[/dim]")
                                
                                # Se o arquivo tem cabe√ßalho, verificamos se existe a coluna "nome"
                                if "nome" not in df.columns:
                                    console.print("[dim]Coluna 'nome' n√£o encontrada no cabe√ßalho[/dim]")
                                    # Se n√£o tiver a coluna nome, mas tiver apenas 1 coluna, renomear para "nome"
                                    if len(df.columns) == 1:
                                        console.print(f"[dim]Renomeando coluna √∫nica '{df.columns[0]}' para 'nome'[/dim]")
                                        df.columns = ["nome"]
                                        success = True
                                        break
                                else:
                                    success = True
                                    break
                            else:
                                console.print("[dim]Lendo CSV sem cabe√ßalho, considerando primeira coluna como 'nome'...[/dim]")
                                # Se n√£o tem cabe√ßalho, l√™ considerando que a primeira coluna √© "nome"
                                df = pd.read_csv(csv_path, header=None, names=["nome"], sep=sep, encoding=encoding)
                                console.print(f"[dim]Dados carregados. Formato da tabela: {df.shape} (linhas x colunas)[/dim]")
                                success = True
                                break
                        except Exception as e:
                            console.print(f"[dim]Tentativa com separador '{sep}' e encoding '{encoding}' falhou: {str(e)}[/dim]")
                    
                    if success:
                        break
                
                if not success:
                    console.print("[bold red]Erro:[/bold red] N√£o foi poss√≠vel ler o arquivo CSV em nenhum formato reconhecido.")
                    console.print("[dim]Dica: Verifique se o arquivo est√° no formato CSV correto.[/dim]")
                    return
                
                if has_header and "nome" not in df.columns and len(df.columns) > 1:
                    console.print("[bold red]Erro:[/bold red] O arquivo CSV com cabe√ßalho deve conter uma coluna chamada 'nome'.")
                    console.print(f"Colunas encontradas: {', '.join(df.columns)}")
                    console.print("[dim]Dica: Se o arquivo possui apenas nomes, selecione 'N√£o' na op√ß√£o de cabe√ßalho[/dim]")
                    return
                
                # Mostrar os primeiros registros para debug
                console.print("[dim]Primeiros registros carregados:[/dim]")
                for i, row in df.head(2).iterrows():
                    console.print(f"[dim]Registro {i+1}: {row.to_dict()}[/dim]")
                
                # Verificar se o arquivo tem mais informa√ß√µes al√©m do nome, caso tenha apenas os nomes
                if len(df.columns) > 1:
                    console.print("[yellow]Aviso: O arquivo CSV cont√©m m√∫ltiplas colunas.[/yellow]")
                    console.print(f"Colunas encontradas: {', '.join(df.columns)}")
                    console.print("[yellow]O sistema utilizar√° apenas a coluna 'nome'.[/yellow]")
                    
                    # Garantir que temos a coluna "nome"
                    if "nome" not in df.columns:
                        console.print("[bold red]Erro:[/bold red] N√£o foi encontrada uma coluna 'nome' no arquivo.")
                        console.print("[dim]Colunas dispon√≠veis:[/dim]")
                        for i, col in enumerate(df.columns):
                            console.print(f"[dim]  {i+1}. {col}[/dim]")
                        return
                
            except pd.errors.EmptyDataError:
                console.print("[bold red]Erro:[/bold red] O arquivo CSV est√° vazio.")
                return
            except pd.errors.ParserError as e:
                console.print(f"[bold red]Erro de formata√ß√£o no CSV:[/bold red] {str(e)}")
                console.print("[dim]Dica: Verifique se o arquivo est√° no formato CSV correto, sem erros de sintaxe.[/dim]")
                return
              # Verificar valores nulos
            if df["nome"].isna().any():
                null_count = df["nome"].isna().sum()
                console.print(f"[yellow]Aviso: Existem {null_count} valores vazios na coluna 'nome'.[/yellow]")
                console.print("[dim]Estes registros ser√£o ignorados ou podem gerar certificados com nomes em branco.[/dim]")
            
            # Remover valores nulos para contagem correta
            df = df.dropna(subset=["nome"])
            
            num_records = len(df)
            
            if num_records == 0:
                console.print("[bold red]Erro:[/bold red] N√£o foram encontrados participantes v√°lidos no arquivo.")
                return
            
            console.print(f"[green]‚úì[/green] Dados carregados com sucesso. {num_records} participantes encontrados.")
            
            # Exibir uma pr√©via dos nomes carregados
            preview_limit = min(5, num_records)
            console.print(f"\n[bold]Pr√©via dos primeiros {preview_limit} participantes:[/bold]")
            for i, nome in enumerate(df["nome"].head(preview_limit)):
                console.print(f"  {i+1}. {nome}")

        except pd.errors.UnicodeDecodeError:
            console.print("[bold red]Erro de codifica√ß√£o:[/bold red] O arquivo n√£o est√° em formato UTF-8.")
            console.print("[dim]Dica: Salve seu arquivo CSV com codifica√ß√£o UTF-8.[/dim]")
            return
        except FileNotFoundError:
            console.print(f"[bold red]Erro:[/bold red] O arquivo {csv_path} n√£o foi encontrado.")
            return
        except PermissionError:
            console.print("[bold red]Erro de permiss√£o:[/bold red] N√£o foi poss√≠vel acessar o arquivo.")
            console.print("[dim]Dica: Verifique se o arquivo est√° sendo usado por outro programa.[/dim]")
            return
        except Exception as e:
            console.print(f"[bold red]Erro ao carregar CSV:[/bold red] {str(e)}")
            console.print(f"[bold yellow]Tipo de erro:[/bold yellow] {type(e).__name__}")
            console.print("[dim]Stack trace para refer√™ncia:[/dim]")
            import traceback
            console.print(f"[dim]{traceback.format_exc()}[/dim]")
            return
    
    # Solicitar informa√ß√µes do evento
    console.print("\n[bold]Informa√ß√µes do Evento[/bold]")
    evento = quiet_text("Nome do evento:")
    data = quiet_text("Data do evento (ex: 15/05/2023):", default=datetime.now().strftime("%d/%m/%Y"))
    local = quiet_text("Local do evento:")
    carga_horaria = quiet_text("Carga hor√°ria (horas):")
    
    # Revisar informa√ß√µes
    while True:
        console.clear()
        console.print("[bold blue]== Revis√£o das Informa√ß√µes do Evento ==[/bold blue]\n")
        
        table = Table(box=box.SIMPLE)
        table.add_column("Campo", style="cyan")
        table.add_column("Valor")
        
        table.add_row("Nome do evento", evento)
        table.add_row("Data", data)
        table.add_row("Local", local)
        table.add_row("Carga hor√°ria", f"{carga_horaria} horas")
        table.add_row("N√∫mero de participantes", str(num_records))
        
        console.print(table)
        
        # Perguntar se deseja modificar algo
        choice = quiet_select(
            "Deseja modificar alguma informa√ß√£o?",
            choices=[
                "N√£o, continuar",
                "Modificar nome do evento",
                "Modificar data",
                "Modificar local",
                "Modificar carga hor√°ria",
                "Cancelar opera√ß√£o"
            ],
            style=get_menu_style()
        )
        
        if choice == "N√£o, continuar":
            break
        elif choice == "Modificar nome do evento":
            evento = quiet_text("Nome do evento:", default=evento)
        elif choice == "Modificar data":
            data = quiet_text("Data do evento:", default=data)
        elif choice == "Modificar local":
            local = quiet_text("Local do evento:", default=local)
        elif choice == "Modificar carga hor√°ria":
            carga_horaria = quiet_text("Carga hor√°ria (horas):", default=carga_horaria)
        elif choice == "Cancelar opera√ß√£o":
            console.print("[yellow]Opera√ß√£o cancelada.[/yellow]")
            return
    
    # Selecionar template
    templates = template_manager.list_templates()
    if not templates:
        console.print("[yellow]Nenhum template dispon√≠vel. Por favor, importe um template primeiro.[/yellow]")
        return
    template_name = quiet_select(
        "Selecione o template a ser utilizado:",
        choices=templates,
        style=get_menu_style()
    )
    
    if not template_name:
        console.print("[yellow]Opera√ß√£o cancelada.[/yellow]")
        return
    
    # Selecionar tema
    themes = ["Nenhum"] + theme_manager.list_themes()
    selected_theme = quiet_select(
        "Selecione um tema para os certificados:",
        choices=themes,
        style=get_menu_style()
    )
    
    theme = None if selected_theme == "Nenhum" else selected_theme
    
    # Mostrar e revisar par√¢metros institucionais
    # This section is kept for user review, but actual loading/applying of template and theme is done by the service.
    institutional_params = parameter_manager.get_institutional_placeholders()
    
    console.print("\n[bold]Par√¢metros Institucionais[/bold]")
    if institutional_params:
        table = Table(box=box.SIMPLE)
        table.add_column("Campo", style="cyan")
        table.add_column("Valor")
        
        for campo, valor in institutional_params.items():
            table.add_row(campo, valor)
        
        console.print(table)
        
        # Perguntar se deseja modificar os par√¢metros
        modify = quiet_confirm("Deseja modificar os par√¢metros institucionais?")
        
        if modify:
            for campo, valor in institutional_params.items():
                novo_valor = quiet_text(f"{campo}:", default=valor)
                institutional_params[campo] = novo_valor
            
            # Atualizar par√¢metros
            parameter_manager.update_institutional_placeholders(institutional_params)
            console.print("[green]‚úì[/green] Par√¢metros institucionais atualizados.")
    else:
        console.print("[yellow]Nenhum par√¢metro institucional configurado.[/yellow]")
      # Configurar diret√≥rio de sa√≠da
    output_dir_input = quiet_path(
        "Pasta de destino para os certificados:",
        default=certificate_service.output_dir, # Use service's default
        only_directories=True
    )

    output_dir = output_dir_input if output_dir_input else certificate_service.output_dir

    # Update the service's output directory and its pdf_generator's output_dir
    certificate_service.output_dir = output_dir
    certificate_service.pdf_generator.output_dir = output_dir
    os.makedirs(output_dir, exist_ok=True) # Ensure directory exists
    
    # Confirma√ß√£o final
    console.print("\n[bold]Resumo da opera√ß√£o:[/bold]")
    console.print(f"- Evento: [cyan]{evento}[/cyan]")
    console.print(f"- Data: [cyan]{data}[/cyan]")
    console.print(f"- Local: [cyan]{local}[/cyan]")
    console.print(f"- Carga hor√°ria: [cyan]{carga_horaria} horas[/cyan]")
    console.print(f"- Participantes: [cyan]{num_records}[/cyan]")
    console.print(f"- Template: [cyan]{template_name}[/cyan]")
    console.print(f"- Tema: [cyan]{selected_theme}[/cyan]")
    console.print(f"- Destino: [cyan]{output_dir}[/cyan]")
    
    confirm = quiet_confirm("Deseja iniciar a gera√ß√£o dos certificados?")
    
    if not confirm:
        console.print("[yellow]Opera√ß√£o cancelada.[/yellow]")
        return
    
    # Preparar informa√ß√µes do evento
    event_data = {
        "evento": evento,
        "data": data,
        "local": local,
        "carga_horaria": carga_horaria,
    }

    # Chamar o servi√ßo de gera√ß√£o de certificados
    console.print("\n[bold]Iniciando gera√ß√£o de certificados com o servi√ßo...[/bold]")
    with console.status("[bold green]Processando certificados..."):
        generation_result = certificate_service.generate_certificates_batch(
            csv_file_path=csv_path,
            event_details=event_data,
            template_name=template_name,
            theme_name=theme, # theme can be None or the selected theme name
            has_header=has_header
        )

    # Exibir resultados
    console.print("\n[bold blue]== Resultados da Gera√ß√£o ==[/bold blue]")
    if generation_result["success_count"] > 0:
        console.print(f"[bold green]‚úì {generation_result['success_count']} certificados gerados com sucesso![/bold green]")
        for file_path in generation_result["generated_files"]:
            console.print(f"  [green]‚Ä¢[/green] {file_path}")
    
    if generation_result["failed_count"] > 0:
        console.print(f"[bold red]‚úó {generation_result['failed_count']} certificados falharam ao gerar.[/bold red]")

    if generation_result["errors"]:
        console.print("\n[bold yellow]Erros e Avisos:[/bold yellow]")
        for error_msg in generation_result["errors"]:
            console.print(f"  [yellow]‚Ä¢[/yellow] {error_msg}")

    # Oferecer op√ß√£o para criar ZIP
    if generation_result["generated_files"]:
        zip_option = quiet_confirm("Deseja empacotar os certificados gerados em um arquivo ZIP?")
        if zip_option:
            zip_name_default = f"{evento.replace(' ', '_')}_{datetime.now().strftime('%Y%m%d')}.zip"
            zip_name = quiet_text(
                "Nome do arquivo ZIP:",
                default=zip_name_default
            )
            if not zip_name.endswith('.zip'):
                zip_name += '.zip'
            
            zip_path = os.path.join(output_dir, zip_name)
            
            with console.status("[bold green]Criando arquivo ZIP..."):
                try:
                    zip_exporter.create_zip(generation_result["generated_files"], zip_path)
                    console.print(f"[bold green]‚úì Arquivo ZIP criado em:[/bold green] {zip_path}")
                except Exception as e_zip:
                    console.print(f"[bold red]Erro ao criar arquivo ZIP:[/bold red] {str(e_zip)}")
    elif not generation_result["errors"] and generation_result["success_count"] == 0 : # No files generated and no specific errors reported by service yet
        console.print("[yellow]Nenhum certificado foi gerado. Verifique as configura√ß√µes e o arquivo CSV.[/yellow]")
    
    console.print("\n[dim]Pressione Enter para voltar ao menu...[/dim]")
    input()


def preview_imported_data():
    """Visualiza dados importados de um CSV."""
    console.clear()
    console.print("[bold blue]== Visualiza√ß√£o de Dados Importados ==[/bold blue]\n")
    
    # Selecionar arquivo CSV
    csv_path = quiet_path(
        "Selecione o arquivo CSV para visualizar:",
        validate=lambda path: os.path.exists(path) and path.endswith('.csv')
    )
    
    if not csv_path:
        console.print("[yellow]Opera√ß√£o cancelada.[/yellow]")
        return
    
    # Verificar se o CSV tem cabe√ßalho
    has_header = quiet_confirm("O arquivo CSV possui linha de cabe√ßalho?")
    
    # Carregar e mostrar dados
    try:
        df = pd.read_csv(csv_path, header=0 if has_header else None)
        
        # Se n√£o h√° cabe√ßalho, atribuir um nome √† coluna
        if not has_header:
            df.columns = ["nome"]
        
        # Criar tabela Rich
        table = Table(title=f"Dados do arquivo: {os.path.basename(csv_path)}")
        
        # Adicionar colunas
        for col in df.columns:
            table.add_column(col, style="cyan")
        
        # Adicionar linhas (limitando a 10 registros para visualiza√ß√£o)
        for _, row in df.head(10).iterrows():
            table.add_row(*[str(val) for val in row.values])
        
        console.print(table)
        
        # Informa√ß√µes adicionais
        console.print(f"\n[bold]Total de registros:[/bold] {len(df)}")
        console.print(f"[bold]Colunas dispon√≠veis:[/bold] {', '.join(df.columns.tolist())}")
        
        # Verificar valores ausentes
        missing = df.isnull().sum()
        if missing.any():
            console.print("\n[yellow]Aviso: O arquivo cont√©m valores ausentes nas seguintes colunas:[/yellow]")
            for col, count in missing[missing > 0].items():
                console.print(f"- {col}: {count} valores ausentes")
    
    except Exception as e:
        console.print(f"[bold red]Erro ao processar o arquivo:[/bold red] {str(e)}")
    
    console.print("\n[dim]Pressione Enter para voltar ao menu...[/dim]")
    input()


def test_certificate_generation():
    """Testa a gera√ß√£o de um certificado √∫nico."""
    console.clear()
    console.print("[bold blue]== Teste de Gera√ß√£o de Certificado ==[/bold blue]\n")
    
    # Selecionar template
    templates = template_manager.list_templates()
    if not templates:
        console.print("[yellow]Nenhum template dispon√≠vel. Por favor, importe um template primeiro.[/yellow]")
        input("\nPressione Enter para voltar...")
        return
    template_name = quiet_select(
        "Selecione o template a ser utilizado:",
        choices=templates,
        style=get_menu_style()
    )
    
    if not template_name:
        console.print("[yellow]Opera√ß√£o cancelada.[/yellow]")
        return
    
    # Carregar template
    template_content = template_manager.load_template(template_name)
    if not template_content:
        console.print(f"[bold red]Erro ao carregar template:[/bold red] Arquivo n√£o encontrado.")
        input("\nPressione Enter para voltar...")
        return
    
    # Identificar placeholders
    placeholders = template_manager.extract_placeholders(template_content)
    
    if not placeholders:
        console.print("[yellow]Aviso: N√£o foram encontrados placeholders no template.[/yellow]")
        input("\nPressione Enter para voltar...")
        return
      # Solicitar valores para os placeholders
    test_data = {}
    console.print("[bold]Informe os valores para os campos:[/bold]\n")
    
    # Solicitar informa√ß√µes principais primeiro
    nome = quiet_text("Nome do participante:")
    evento = quiet_text("Nome do evento:")
    data = quiet_text("Data do evento (ex: 15/05/2025):", default=datetime.now().strftime("%d/%m/%Y"))
    local = quiet_text("Local do evento:")
    carga_horaria = quiet_text("Carga hor√°ria (horas):")
      # Gerar c√≥digo de autentica√ß√£o para o teste
    codigo_autenticacao = auth_manager.gerar_codigo_autenticacao(
        nome_participante=nome,
        evento=evento,
        data_evento=data
    )    # O c√≥digo de verifica√ß√£o curto foi depreciado, usando o pr√≥prio c√≥digo de autentica√ß√£o completo
    codigo_verificacao = codigo_autenticacao
    
    url_base = "https://nepemufsc.com/verificar-certificados"
    qrcode_url = auth_manager.gerar_qrcode_data(codigo_autenticacao)
    
    # Salvar informa√ß√µes do certificado de teste
    auth_manager.salvar_codigo(
        codigo_autenticacao=codigo_autenticacao,
        nome_participante=nome,
        evento=evento,
        data_evento=data,
        local_evento=local,
        carga_horaria=carga_horaria
    )
    
    # Adicionar valores principais e c√≥digos ao dicion√°rio de dados
    test_data["nome"] = nome
    test_data["evento"] = evento
    test_data["data"] = data
    test_data["local"] = local
    test_data["carga_horaria"] = carga_horaria    
    test_data["codigo_autenticacao"] = codigo_autenticacao
    test_data["codigo_verificacao"] = codigo_verificacao
    test_data["url_verificacao"] = url_base
    test_data["url_qrcode"] = qrcode_url
    test_data["data_emissao"] = datetime.now().strftime("%d/%m/%Y")
    
    # Solicitar valores para os demais placeholders que n√£o foram preenchidos
    outros_placeholders = [p for p in placeholders if p not in test_data]
    for placeholder in outros_placeholders:
        value = quiet_text(f"Valor para '{placeholder}':")
        test_data[placeholder] = value
    
    # Gerar PDF de teste
    output_path = os.path.join(certificate_service.output_dir, "certificado_teste.pdf") # Use service's output_dir
    
    try:
        with console.status("[bold green]Gerando certificado de teste..."):
            # Gerar HTML com os valores substitu√≠dos usando o template_manager
            temp_name = f"temp_test_{random.randint(1000, 9999)}.html"
            temp_path = os.path.join("templates", temp_name)
            
            try:
                # Salvar template tempor√°rio
                with open(temp_path, "w", encoding="utf-8") as f:
                    f.write(template_content)
                  # Gerar QR code adaptado ao tamanho do placeholder no template
                qr_info = auth_manager.gerar_qrcode_adaptado(codigo_autenticacao, template_content)
                test_data["qrcode_base64"] = qr_info["qrcode_base64"]
                
                # Renderizar o template com os dados
                html_content = template_manager.render_template(temp_name, test_data)
                
                # Substituir o placeholder do QR code pelo QR code real
                html_content = auth_manager.substituir_qr_placeholder(html_content, qr_info["qrcode_base64"])
                
                # Gerar PDF
                pdf_generator.generate_pdf(html_content, output_path, orientation='landscape')
            finally:
                # Limpar arquivo tempor√°rio
                if os.path.exists(temp_path):
                    os.remove(temp_path)
        
        console.print(f"[bold green]‚úì Certificado de teste gerado com sucesso![/bold green]")
        console.print(f"[bold]Caminho:[/bold] {output_path}")
        
        # Oferecer op√ß√£o para abrir o PDF
        open_option = quiet_confirm("Deseja abrir o certificado gerado?")
        
        if open_option:
            import subprocess
            try:
                os.startfile(output_path)  # Windows
            except AttributeError:
                try:
                    subprocess.call(["open", output_path])  # macOS
                except:
                    subprocess.call(["xdg-open", output_path])  # Linux
    
    except Exception as e:
        console.print(f"[bold red]Erro ao gerar certificado de teste:[/bold red] {str(e)}")
    
    console.print("\n[dim]Pressione Enter para voltar ao menu...[/dim]")
    input()


# Fun√ß√µes de implementa√ß√£o para o menu de templates

def list_templates():
    """Lista os templates dispon√≠veis."""
    console.clear()
    console.print("[bold blue]== Templates Dispon√≠veis ==[/bold blue]\n")
    
    templates = template_manager.list_templates()
    
    if not templates:
        console.print("[yellow]Nenhum template encontrado.[/yellow]")
    else:
        table = Table(show_header=True, header_style="bold")
        table.add_column("Nome do Template", style="cyan")
        table.add_column("Tamanho", justify="right")
        table.add_column("√öltima Modifica√ß√£o")
        
        for template in templates:
            template_path = os.path.join(template_manager.templates_dir, template)
            size = os.path.getsize(template_path) / 1024  # KB
            mod_time = datetime.fromtimestamp(os.path.getmtime(template_path))
            
            table.add_row(
                template,
                f"{size:.1f} KB",
                mod_time.strftime("%d/%m/%Y %H:%M")
            )
        
        console.print(table)
    
    console.print("\n[dim]Pressione Enter para voltar ao menu...[/dim]")
    input()


def import_template():
    """Importa um novo template."""
    console.clear()
    console.print("[bold blue]== Importar Novo Template ==[/bold blue]\n")
    
    # Solicitar caminho do template
    template_path = quiet_path(
        "Selecione o arquivo HTML do template:",
        validate=lambda path: os.path.exists(path) and path.lower().endswith('.html')
    )
    
    if not template_path:
        console.print("[yellow]Opera√ß√£o cancelada.[/yellow]")
        return
    
    # Solicitar nome para salvar o template
    template_name = quiet_text(
        "Nome para salvar o template:",
        default=os.path.basename(template_path)
    )
    
    if not template_name:
        console.print("[yellow]Opera√ß√£o cancelada.[/yellow]")
        return
    
    if not template_name.lower().endswith('.html'):
        template_name += '.html'
    
    # Verificar se j√° existe um template com esse nome
    templates = template_manager.list_templates()
    if template_name in templates:
        overwrite = quiet_confirm(
            f"J√° existe um template com o nome '{template_name}'. Deseja sobrescrever?"
        )
        
        if not overwrite:
            console.print("[yellow]Opera√ß√£o cancelada.[/yellow]")
            return
    
    # Ler o conte√∫do do arquivo original
    try:
        with open(template_path, 'r', encoding='utf-8') as f:
            template_content = f.read()
        
        # Salvar o template
        template_manager.save_template(template_name, template_content)
        console.print(f"[bold green]‚úì Template '{template_name}' importado com sucesso![/bold green]")
    
    except Exception as e:
        console.print(f"[bold red]Erro ao importar template:[/bold red] {str(e)}")
    
    console.print("\n[dim]Pressione Enter para voltar ao menu...[/dim]")
    input()


def edit_template():
    """Edita um template existente."""
    console.clear()
    console.print("[bold blue]== Editar Template ==[/bold blue]\n")
    
    # Listar templates dispon√≠veis
    templates = template_manager.list_templates()
    
    if not templates:
        console.print("[yellow]Nenhum template dispon√≠vel para edi√ß√£o.[/yellow]")
        input("\nPressione Enter para voltar...")
        return
    
    # Selecionar template para editar    
    template_name = quiet_select(
        "Selecione o template para editar:",
        choices=templates,
        style=get_menu_style()
    )
    
    if not template_name:
        console.print("[yellow]Opera√ß√£o cancelada.[/yellow]")
        return
    
    # Carregar conte√∫do do template
    template_content = template_manager.load_template(template_name)
    if not template_content:
        console.print(f"[bold red]Erro ao carregar template:[/bold red] Arquivo n√£o encontrado.")
        return
    
    console.print(f"[bold]Conte√∫do atual do template:[/bold] {template_name}\n")
    console.print(Syntax(template_content[:500] + "..." if len(template_content) > 500 else template_content, "html"))
    
    console.print("\n[yellow]Aviso: A edi√ß√£o direta de templates HTML via CLI √© limitada.[/yellow]")
    console.print("[yellow]Para edi√ß√µes complexas, recomendamos usar um editor HTML externo.[/yellow]\n")
    
    # Oferecer op√ß√£o para abrir em um editor externo
    open_option = quiet_confirm("Deseja abrir o template em um editor externo?")
    
    if open_option:
        template_path = os.path.join(template_manager.templates_dir, template_name)
        
        try:
            import subprocess
            try:
                os.startfile(template_path)  # Windows
            except AttributeError:
                try:
                    subprocess.call(["open", template_path])  # macOS
                except:
                    subprocess.call(["xdg-open", template_path])  # Linux
            
            console.print("[green]Template aberto no editor padr√£o.[/green]")
            console.print("[yellow]Lembre-se de salvar o arquivo ap√≥s a edi√ß√£o.[/yellow]")
        
        except Exception as e:
            console.print(f"[bold red]Erro ao abrir o arquivo:[/bold red] {str(e)}")
    
    console.print("\n[dim]Pressione Enter para voltar ao menu...[/dim]")
    input()


def delete_template():
    """Exclui um template."""
    console.clear()
    console.print("[bold blue]== Excluir Template ==[/bold blue]\n")
    
    # Listar templates dispon√≠veis
    templates = template_manager.list_templates()
    
    if not templates:
        console.print("[yellow]Nenhum template dispon√≠vel para exclus√£o.[/yellow]")
        input("\nPressione Enter para voltar...")
        return
    
    # Selecionar template para excluir    
    template_name = quiet_select(
        "Selecione o template para excluir:",
        choices=templates,
        style=get_menu_style()
    )
    
    if not template_name:
        console.print("[yellow]Opera√ß√£o cancelada.[/yellow]")
        return
    
    # Confirmar exclus√£o
    confirm = quiet_confirm(
        f"Tem certeza que deseja excluir o template '{template_name}'? Esta a√ß√£o n√£o pode ser desfeita."
    )
    
    if not confirm:
        console.print("[yellow]Opera√ß√£o cancelada.[/yellow]")
        return
    
    # Excluir o template
    result = template_manager.delete_template(template_name)
    
    if result:
        console.print(f"[bold green]‚úì Template '{template_name}' exclu√≠do com sucesso![/bold green]")
    else:
        console.print(f"[bold red]Erro ao excluir template:[/bold red] Arquivo n√£o encontrado.")
    
    console.print("\n[dim]Pressione Enter para voltar ao menu...[/dim]")
    input()


def preview_template():
    """Visualiza um template."""
    console.clear()
    console.print("[bold blue]== Visualizar Template ==[/bold blue]\n")
    
    # Listar templates dispon√≠veis
    templates = template_manager.list_templates()
    
    if not templates:
        console.print("[yellow]Nenhum template dispon√≠vel para visualiza√ß√£o.[/yellow]")
        input("\nPressione Enter para voltar...")
        return
    
    # Selecionar template para visualizar    
    template_name = quiet_select(
        "Selecione o template para visualizar:",
        choices=templates,
        style=get_menu_style()
    )
    
    if not template_name:
        console.print("[yellow]Opera√ß√£o cancelada.[/yellow]")
        return
    
    # Carregar conte√∫do do template
    template_content = template_manager.load_template(template_name)
    if not template_content:
        console.print(f"[bold red]Erro ao carregar template:[/bold red] Arquivo n√£o encontrado.")
        return
    
    # Detectar placeholders no template
    placeholders = template_manager.extract_placeholders(template_content)
    
    console.print(f"[bold]Template:[/bold] {template_name}\n")
    
    # Mostrar informa√ß√µes sobre o template
    console.print("[bold]Visualiza√ß√£o do HTML:[/bold]")
    console.print(Syntax(template_content[:1000] + "..." if len(template_content) > 1000 else template_content, "html"))
    
    if placeholders:
        console.print("\n[bold]Placeholders detectados:[/bold]")
        for i, placeholder in enumerate(placeholders, 1):
            console.print(f"{i}. [cyan]{{{{{placeholder}}}}}[/cyan]")
    else:
        console.print("\n[yellow]Nenhum placeholder detectado no template.[/yellow]")
    
    # Oferecer op√ß√£o para gerar uma pr√©via em PDF com dados fict√≠cios
    preview_option = quiet_confirm("Deseja gerar uma pr√©via em PDF com dados de exemplo?")
    
    if preview_option:
        # Criar dados de exemplo para os placeholders
        example_data = {}
        for placeholder in placeholders:
            example_data[placeholder] = f"Exemplo de {placeholder}"
        
        # Gerar PDF de pr√©via
        preview_path = os.path.join(certificate_service.output_dir, "preview_template.pdf") # Use service's output_dir
        
        try:
            with console.status("[bold green]Gerando pr√©via em PDF..."):
                # Preparar template tempor√°rio
                temp_name = f"temp_preview_{random.randint(1000, 9999)}.html"
                temp_path = os.path.join("templates", temp_name)
                
                try:
                    # Salvar template tempor√°rio
                    with open(temp_path, "w", encoding="utf-8") as f:
                        f.write(template_content)
                    
                    # Renderizar com dados de exemplo
                    html_content = template_manager.render_template(temp_name, example_data)
                      # Gerar PDF
                    pdf_generator.generate_pdf(html_content, preview_path, orientation='landscape')
                finally:
                    # Limpar arquivo tempor√°rio
                    if os.path.exists(temp_path):
                        os.remove(temp_path)
            
            console.print(f"[bold green]‚úì Pr√©via gerada com sucesso![/bold green]")
            console.print(f"[bold]Caminho:[/bold] {preview_path}")
            
            # Oferecer op√ß√£o para abrir o PDF
            open_option = quiet_confirm("Deseja abrir a pr√©via em PDF?")
            
            if open_option:
                import subprocess
                try:
                    os.startfile(preview_path)  # Windows
                except AttributeError:
                    try:
                        subprocess.call(["open", preview_path])  # macOS
                    except:
                        subprocess.call(["xdg-open", preview_path])  # Linux
        
        except Exception as e:
            console.print(f"[bold red]Erro ao gerar pr√©via:[/bold red] {str(e)}")
    
    console.print("\n[dim]Pressione Enter para voltar ao menu...[/dim]")
    input()


# Fun√ß√µes de implementa√ß√£o para as demais op√ß√µes de menu (b√°sicas)

def configure_directories():
    """Configura os diret√≥rios de trabalho."""
    console.print("[yellow]Fun√ß√£o ainda n√£o implementada.[/yellow]")
    input("\nPressione Enter para voltar...")


def configure_appearance():
    """Configura apar√™ncia e tema."""
    console.print("[yellow]Fun√ß√£o ainda n√£o implementada.[/yellow]")
    input("\nPressione Enter para voltar...")


def configure_generation_parameters():
    """Configura par√¢metros de gera√ß√£o de certificados."""
    console.clear()
    console.print("[bold blue]== Par√¢metros de Gera√ß√£o de Certificados ==[/bold blue]\n")
    
    choice = quiet_select(
        "O que voc√™ deseja configurar?",
        choices=[
            "üìù Valores para campos institucionais",
            "üî§ Valores padr√£o para campos",
            "üñºÔ∏è Valores espec√≠ficos para temas",
            "‚Ü©Ô∏è Voltar"
        ],
        style=get_menu_style()
    )
    
    if choice == "üìù Valores para campos institucionais":
        configure_institutional_placeholders()
    elif choice == "üî§ Valores padr√£o para campos":
        configure_default_placeholders()
    elif choice == "üñºÔ∏è Valores espec√≠ficos para temas":
        configure_theme_placeholders()
    elif choice == "‚Ü©Ô∏è Voltar":
        return


def configure_institutional_placeholders():
    """Configura valores institucionais."""
    console.clear()
    console.print("[bold blue]== Configura√ß√£o de Campos Institucionais ==[/bold blue]\n")
    
    # Carregar valores institucionais existentes
    institutional = parameter_manager.get_institutional_placeholders()
    
    # Exibir valores atuais
    if institutional:
        console.print("[bold]Valores atuais:[/bold]")
        table = Table(show_header=True, header_style="bold blue", box=box.SIMPLE)
        table.add_column("Campo", style="cyan")
        table.add_column("Valor")
        
        for field, value in institutional.items():
            table.add_row(field, value)
        
        console.print(table)
    else:
        console.print("[yellow]Nenhum valor institucional configurado.[/yellow]")
    
    # Menu de op√ß√µes
    choice = quiet_select(
        "O que voc√™ deseja fazer?",
        choices=[
            "‚ûï Adicionar/editar campo",
            "üóëÔ∏è Remover campo",
            "‚Ü©Ô∏è Voltar"
        ],
        style=get_menu_style()
    )
    
    if choice == "‚ûï Adicionar/editar campo":
        field = quiet_text("Nome do campo:")
        if field:
            value = quiet_text(f"Valor para '{field}':")
            if field and value:
                parameter_manager.update_institutional_placeholders({field: value})
                console.print(f"[green]‚úì[/green] Campo '{field}' atualizado.")
                
                # Recarregar esta tela para mostrar valores atualizados
                configure_institutional_placeholders()
    
    elif choice == "üóëÔ∏è Remover campo":
        if not institutional:
            console.print("[yellow]N√£o h√° campos para remover.[/yellow]")
            input("\nPressione Enter para voltar...")
            configure_institutional_placeholders()
            return
        field_to_remove = quiet_select(
            "Selecione o campo para remover:",
            choices=list(institutional.keys()) + ["Cancelar"],
            style=get_menu_style()
        )
        
        if field_to_remove and field_to_remove != "Cancelar":
            confirm = quiet_confirm(f"Tem certeza que deseja remover '{field_to_remove}'?")
            if confirm:
                params = parameter_manager.parameters
                if "institutional_placeholders" in params and field_to_remove in params["institutional_placeholders"]:
                    del params["institutional_placeholders"][field_to_remove]
                    parameter_manager.save_parameters()
                    console.print(f"[green]‚úì[/green] Campo '{field_to_remove}' removido.")
                
                # Recarregar esta tela para mostrar valores atualizados
                configure_institutional_placeholders()
    
    elif choice == "‚Ü©Ô∏è Voltar":
        configure_generation_parameters()


def configure_default_placeholders():
    """Configura valores padr√£o."""
    # Implementa√ß√£o b√°sica
    console.print("[yellow]Fun√ß√£o ainda n√£o implementada completamente.[/yellow]")
    input("\nPressione Enter para voltar...")


def configure_theme_placeholders():
    """Configura valores para temas."""
    # Implementa√ß√£o b√°sica
    console.print("[yellow]Fun√ß√£o ainda n√£o implementada completamente.[/yellow]")
    input("\nPressione Enter para voltar...")


def manage_presets():
    """Gerencia presets de configura√ß√£o."""
    console.print("[yellow]Fun√ß√£o ainda n√£o implementada.[/yellow]")
    input("\nPressione Enter para voltar...")


def check_connection():
    """Verifica o status da conex√£o."""
    console.clear()
    console.print("[bold blue]== Status da Conex√£o ==[/bold blue]\n")
    
    with console.status("[bold green]Verificando conex√£o com o servidor..."):
        result = connectivity_manager.check_connection()
    
    status_color = {
        "Conectado": "green",
        "Desconectado": "red",
        "Aguardando": "yellow"
    }.get(result["status"], "yellow")
    
    # Criar textos formatados do Rich para evitar que as tags apare√ßam
    console.print(Text.from_markup(f"[bold]Status:[/bold] "), end="")
    console.print(Text(result["status"], style=status_color))
    
    console.print(Text.from_markup(f"[bold]Mensagem:[/bold] {result['message']}"))
    console.print(Text.from_markup(f"[bold]Hor√°rio:[/bold] {result['timestamp']}"))
    
    if "server_url" in connectivity_manager.config and connectivity_manager.config["server_url"]:
        console.print(Text.from_markup(f"[bold]URL do servidor:[/bold] {connectivity_manager.config['server_url']}"))
    else:
        console.print(Text("Servidor n√£o configurado.", style="yellow"))
    
    console.print("\n[dim]Pressione Enter para voltar ao menu...[/dim]")
    input()


def configure_remote_server():
    """Configura as op√ß√µes de conex√£o com o servidor remoto."""
    console.clear()
    console.print("[bold blue]== Configurar Conex√£o com Servidor Remoto ==[/bold blue]\n")

    current_config = connectivity_manager.config
    console.print(f"URL do Servidor Atual: [cyan]{current_config.get('server_url', 'N√£o configurado')}[/cyan]")
    console.print(f"Chave de API Atual: [cyan]{'Configurada' if current_config.get('api_key') else 'N√£o configurada'}[/cyan]")
    console.print(f"Usu√°rio Atual: [cyan]{current_config.get('username', 'N√£o configurado')}[/cyan]")
    console.print("---\n")

    new_url = quiet_text(
        "Nova URL do Servidor (deixe em branco para manter atual):",
        default=current_config.get('server_url', '')
    ).strip()

    new_api_key = quiet_text(
        "Nova Chave de API (deixe em branco para manter atual, '#' para limpar):",
        default=""  # Don't show current API key
    ).strip()

    new_username = quiet_text(
        "Novo Usu√°rio (deixe em branco para manter atual, '#' para limpar):",
        default=current_config.get('username', '')
    ).strip()
    
    new_password = quiet_text(
        "Nova Senha (deixe em branco para n√£o alterar se usu√°rio n√£o mudar; '#' para limpar senha):",
        default="" # Do not display current password
    ).strip()

    changes_made = False
    if new_url != current_config.get('server_url', ''): # Check against empty string if not set
        connectivity_manager.set_server_url(new_url)
        console.print(f"[green]‚úì URL do servidor atualizada para: {new_url if new_url else 'Nenhuma (removida)'}[/green]")
        changes_made = True

    if new_api_key: # Only process if user typed something for API key
        if new_api_key == '#':
            if current_config.get('api_key'): # Only print if there was a key
                connectivity_manager.set_api_key("")
                console.print("[yellow]‚úì Chave de API removida.[/yellow]")
                changes_made = True
            else:
                console.print("[dim]Nenhuma chave de API para remover.[/dim]")
        else:
            connectivity_manager.set_api_key(new_api_key)
            console.print("[green]‚úì Chave de API atualizada.[/green]")
            changes_made = True
    
    # Username and Password Logic
    current_username_val = current_config.get('username', '')
    current_password_val = current_config.get('password', '') # Needed for comparison
    
    processed_username = current_username_val
    username_explicitly_changed = False

    if new_username: # User typed something for username
        if new_username == '#':
            if current_username_val: # Only if there was a username
                processed_username = ""
                console.print("[yellow]‚úì Usu√°rio removido.[/yellow]")
                username_explicitly_changed = True
            else:
                console.print("[dim]Nenhum usu√°rio para remover.[/dim]")
        elif new_username != current_username_val:
            processed_username = new_username
            console.print(f"[green]‚úì Usu√°rio atualizado para: {processed_username}[/green]")
            username_explicitly_changed = True
        # If new_username is same as current_username_val, no change yet for username itself

    processed_password = current_password_val

    if new_password: # User typed something for password
        if new_password == '#':
            if current_password_val: # Only if there was a password
                processed_password = ""
                console.print("[yellow]‚úì Senha removida.[/yellow]")
            else:
                console.print("[dim]Nenhuma senha para remover.[/dim]")
        else:
            processed_password = new_password
            console.print("[green]‚úì Senha atualizada.[/green]")
    elif username_explicitly_changed and processed_username != "": 
        # Username changed (and not to blank), but no new password typed. Clear old password.
        if current_password_val: # Only if there was an old password
            processed_password = ""
            console.print("[yellow]‚úì Senha anterior removida devido √† mudan√ßa de usu√°rio. Defina uma nova senha se necess√°rio.[/yellow]")
    
    # If username is cleared, password must also be cleared
    if processed_username == "" and current_username_val != "": # If username was just cleared
        if current_password_val: # And there was a password
             processed_password = "" # Ensure password is also cleared
             console.print("[yellow]‚úì Senha removida pois usu√°rio foi removido.[/yellow]")


    # Update credentials if they actually changed from what's stored
    if processed_username != current_username_val or processed_password != current_password_val:
        connectivity_manager.set_credentials(processed_username, processed_password)
        changes_made = True # This ensures save_config is called

    if not changes_made:
        console.print("\n[dim]Nenhuma altera√ß√£o feita.[/dim]")
    else:
        connectivity_manager.save_config() 
        console.print("\n[bold green]‚úì Configura√ß√µes de conex√£o salvas com sucesso![/bold green]")

    console.print("\n[dim]Pressione Enter para voltar ao menu...[/dim]")
    input()


def upload_certificates_ui():
    """Interface do usu√°rio para enviar certificados para o servidor remoto."""
    console.clear()
    console.print("[bold blue]== Enviar Certificados para Servidor Remoto ==[/bold blue]\n")

    # Check if server is configured
    if not connectivity_manager.config.get("server_url"):
        console.print("[yellow]URL do servidor n√£o configurada. Configure o servidor primeiro.[/yellow]")
        console.print("\n[dim]Pressione Enter para voltar ao menu...[/dim]")
        input()
        return

    console.print(f"Enviando para: [cyan]{connectivity_manager.config['server_url']}[/cyan]")

    default_output_dir = certificate_service.output_dir # Use global certificate_service instance

    pdf_dir = quiet_path(
        "Selecione o diret√≥rio contendo os certificados PDF para enviar:",
        default=default_output_dir,
        only_directories=True,
        validate=lambda path: os.path.isdir(path)
    )

    if not pdf_dir:
        console.print("[yellow]Opera√ß√£o cancelada.[/yellow]")
        return

    # List PDF files in the selected directory
    try:
        pdf_files = [f for f in os.listdir(pdf_dir) if f.lower().endswith(".pdf")]
        if not pdf_files:
            console.print(f"[yellow]Nenhum arquivo PDF encontrado em '{pdf_dir}'.[/yellow]")
            console.print("\n[dim]Pressione Enter para voltar ao menu...[/dim]")
            input()
            return
        
        console.print(f"\nArquivos PDF encontrados em '{os.path.basename(pdf_dir)}':")
        for i, fname in enumerate(pdf_files):
             console.print(f"  {i+1}. {fname}")

    except Exception as e:
        console.print(f"[red]Erro ao listar arquivos PDF: {str(e)}[/red]")
        console.print("\n[dim]Pressione Enter para voltar ao menu...[/dim]")
        input()
        return
    
    # Ask for confirmation
    confirm_upload = quiet_confirm(f"\nDeseja enviar {len(pdf_files)} certificado(s) para o servidor?")
    if not confirm_upload:
        console.print("[yellow]Envio cancelado.[/yellow]")
        return

    full_file_paths = [os.path.join(pdf_dir, fname) for fname in pdf_files]

    with console.status("[bold green]Enviando certificados...", spinner="dots") as status:
        result = connectivity_manager.upload_certificates(full_file_paths)

        if result.get("success", False):
            status.update("[bold green]Certificados enviados com sucesso![/bold green]")
            console.print(f"\n[green]‚úì {result.get('message', 'Envio conclu√≠do.')}[/green]")
            if result.get("files_processed") is not None: # Check if key exists
                console.print(f"  Arquivos processados: {result.get('files_processed')}")
            if result.get("details"): # Assuming 'details' is a list of dicts
                console.print("  Detalhes do envio:")
                for item in result.get("details", []):
                    item_status = item.get('status', 'N/A')
                    item_error = item.get('error', '')
                    error_msg = f", Erro: {item_error}" if item_error else ""
                    console.print(f"    - Arquivo: {item.get('filename', 'N/A')}, Status: {item_status}{error_msg}")
        else:
            status.update("[bold red]Falha no envio dos certificados.[/bold red]")
            console.print(f"\n[red]‚úó {result.get('message', 'Erro desconhecido durante o envio.')}[/red]")
    
    console.print("\n[dim]Pressione Enter para voltar ao menu...[/dim]")
    input()


def download_templates_ui():
    """Interface do usu√°rio para baixar templates do servidor remoto."""
    console.clear()
    console.print("[bold blue]== Baixar Templates do Servidor Remoto ==[/bold blue]\n")

    if not connectivity_manager.config.get("server_url"):
        console.print("[yellow]URL do servidor n√£o configurada. Configure o servidor primeiro.[/yellow]")
        console.print("\n[dim]Pressione Enter para voltar ao menu...[/dim]")
        input()
        return

    console.print(f"Buscando templates de: [cyan]{connectivity_manager.config['server_url']}[/cyan]")

    with console.status("[bold green]Buscando lista de templates dispon√≠veis...", spinner="dots") as status:
        list_result = connectivity_manager.download_templates() # This lists templates

        if not list_result.get("success") or not list_result.get("templates"):
            status.update("[bold red]Falha ao buscar templates.[/bold red]")
            message = list_result.get('message', 'N√£o foi poss√≠vel obter a lista de templates do servidor.')
            console.print(f"[red]‚úó {message}[/red]")
            if isinstance(list_result.get("templates"), list) and not list_result.get("templates") and list_result.get("success"):
                 console.print("[yellow]Nenhum template encontrado no servidor.[/yellow]")
            console.print("\n[dim]Pressione Enter para voltar ao menu...[/dim]")
            input()
            return
        
        status.update("[bold green]Lista de templates recebida.[/bold green]")
        remote_templates = list_result.get("templates", [])

    console.print("\n[bold]Templates dispon√≠veis no servidor:[/bold]")
    
    if not remote_templates: # Should be caught above, but double check
        console.print("[yellow]Nenhum template encontrado no servidor.[/yellow]")
        console.print("\n[dim]Pressione Enter para voltar ao menu...[/dim]")
        input()
        return

    template_choices = []
    for idx, t_info in enumerate(remote_templates):
        choice_label = f"{t_info.get('name', f'Template {idx+1}')}"
        if t_info.get('description'):
            choice_label += f" - {t_info.get('description')}"
        if t_info.get('version'): # Assuming API might provide version
            choice_label += f" (v{t_info.get('version')})"
        template_choices.append({"name": choice_label, "value": t_info.get('name'), "checked": False})

    if not template_choices:
        console.print("[red]Erro ao processar lista de templates recebidos.[/red]")
        input("\nPressione Enter para voltar...")
        return

    selected_template_names = quiet_checkbox(
        "Selecione os templates que deseja baixar (espa√ßo para marcar, Enter para confirmar):",
        choices=template_choices
    )

    if not selected_template_names:
        console.print("[yellow]Nenhum template selecionado para download.[/yellow]")
        console.print("\n[dim]Pressione Enter para voltar ao menu...[/dim]")
        input()
        return

    console.print(f"\nBaixando {len(selected_template_names)} template(s)...")
    target_template_dir = template_manager.templates_dir 
    os.makedirs(target_template_dir, exist_ok=True)
    
    downloaded_count = 0
    failed_count = 0
    download_errors = []

    with Progress(
        SpinnerColumn(),
        TextColumn("[progress.description]{task.description}"),
        BarColumn(),
        TaskProgressColumn(),
        transient=False # Keep progress bar visible after completion
    ) as progress_bar:
        download_task = progress_bar.add_task("Baixando...", total=len(selected_template_names))

        for template_name_to_download in selected_template_names:
            if not template_name_to_download: continue

            progress_bar.update(download_task, description=f"Baixando {template_name_to_download}...")
            
            local_template_path = os.path.join(target_template_dir, template_name_to_download)
            if os.path.exists(local_template_path):
                overwrite = quiet_confirm(
                    f"O template '{template_name_to_download}' j√° existe localmente. Deseja sobrescrev√™-lo?",
                    default=False
                )
                if not overwrite:
                    console.print(f"[yellow]Download de '{template_name_to_download}' pulado.[/yellow]")
                    progress_bar.update(download_task, advance=1)
                    continue
            
            download_specific_result = connectivity_manager.download_specific_template(
                template_name_to_download, 
                target_template_dir
            )

            if download_specific_result.get("success"):
                console.print(f"[green]‚úì Template '{template_name_to_download}' baixado para '{target_template_dir}'.[/green]")
                downloaded_count += 1
            else:
                error_msg = download_specific_result.get('message', 'Erro desconhecido')
                console.print(f"[red]‚úó Falha ao baixar '{template_name_to_download}': {error_msg}[/red]")
                failed_count += 1
                download_errors.append(f"{template_name_to_download}: {error_msg}")
            progress_bar.update(download_task, advance=1)

    console.print("\n[bold]Resumo do Download:[/bold]")
    console.print(f"[green]Templates baixados com sucesso: {downloaded_count}[/green]")
    if failed_count > 0:
        console.print(f"[red]Falhas no download: {failed_count}[/red]")
        if download_errors:
             console.print("[bold red]Detalhes dos erros:[/bold red]")
             for error in download_errors:
                 console.print(f"  - {error}")
    
    console.print("\n[dim]Pressione Enter para voltar ao menu...[/dim]")
    input()


def configure_credentials():
    """Configura credenciais de acesso ao servidor."""
    # Implementa√ß√£o b√°sica
    console.print("[yellow]Fun√ß√£o ainda n√£o implementada completamente.[/yellow]")
    input("\nPressione Enter para voltar...")


# Fun√ß√£o principal do aplicativo
def main():
    """Fun√ß√£o principal que inicializa o aplicativo."""
    # Exibe a tela de carregamento antes de iniciar
    try:
        from app.loading_screen import loading_dummy
        loading_dummy(4.0)  # Exibir por 4 segundos (s√≥ ser√° exibido uma vez)
    except ImportError:
        # Se n√£o conseguir importar a tela de carregamento, continua normalmente
        console.print("[yellow]Aviso: M√≥dulo de carregamento n√£o encontrado.[/yellow]")
    
    # Continuar com o menu principal ap√≥s o carregamento
    while main_menu():
        pass


# Ponto de entrada do script
if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        console.print("\n[bold yellow]Programa encerrado pelo usu√°rio.[/bold yellow]")
    except Exception as e:
        console.print(f"\n[bold red]Erro inesperado:[/bold red] {str(e)}")

def debug_compare_themes():
    """Ferramenta de debug para comparar temas usando dados de exemplo."""
    console.clear()
    console.print("[bold blue]== DEBUG: Compara√ß√£o de Temas ==[/bold blue]\n")
    console.print("[yellow]Esta ferramenta gera certificados com TODOS os temas dispon√≠veis usando dados de exemplo.[/yellow]")
    console.print("[yellow]√ötil para debug e compara√ß√£o visual dos temas.[/yellow]\n")
    
    # Listar templates dispon√≠veis
    templates = template_manager.list_templates()
    
    if not templates:
        console.print("[red]‚ùå Nenhum template dispon√≠vel.[/red]")
        console.print("Importe um template primeiro antes de usar esta ferramenta.")
        input("\nPressione Enter para voltar...")
        return
    
    # Selecionar template
    template_name = quiet_select(
        "Selecione o template para usar:",
        choices=templates,
        style=get_menu_style()
    )
    
    if not template_name:
        console.print("[yellow]Opera√ß√£o cancelada.[/yellow]")
        return
    
    # Carregar template
    template_content = template_manager.load_template(template_name)
    if not template_content:
        console.print(f"[red]‚ùå Erro ao carregar template: {template_name}[/red]")
        return
      # Gerar c√≥digo de autentica√ß√£o para exemplos de temas
    nome_exemplo = "Jo√£o da Silva Santos"
    evento_exemplo = "Workshop de Tecnologia e Inova√ß√£o"
    data_exemplo = "15 a 17 de maio de 2025"
    
    # Gerar c√≥digo de autentica√ß√£o para o exemplo    
    codigo_autenticacao_exemplo = auth_manager.gerar_codigo_autenticacao(
        nome_participante=nome_exemplo,
        evento=evento_exemplo,
        data_evento=data_exemplo
    )
    # Usa o pr√≥prio c√≥digo de autentica√ß√£o como c√≥digo de verifica√ß√£o
    codigo_verificacao_exemplo = codigo_autenticacao_exemplo
    # Gera a URL base para verifica√ß√£o (sem o c√≥digo)
    url_verificacao_exemplo = "https://nepemufsc.com/verificar-certificados"
    # Gera a URL completa para o QR code (com o c√≥digo como par√¢metro)
    qrcode_url_exemplo = auth_manager.gerar_qrcode_data(codigo_autenticacao_exemplo)
    
    # Dados de exemplo fixos para todos os certificados
    sample_data = {
        "nome": nome_exemplo,
        "evento": evento_exemplo,
        "local": "Campus Universit√°rio - Sala de Confer√™ncias",
        "data": data_exemplo,
        "carga_horaria": "20",
        "coordenador": "Prof. Dr. Maria Fernanda Costa",
        "diretor": "Prof. Dr. Roberto Andrade Lima",
        "cidade": "Florian√≥polis",        "data_emissao": "29 de maio de 2025",
        "codigo_autenticacao": codigo_autenticacao_exemplo,
        "codigo_verificacao": codigo_verificacao_exemplo,
        "url_verificacao": url_verificacao_exemplo,
        "url_qrcode": qrcode_url_exemplo,
        "intro_text": "Certificamos que",
        "participation_text": "participou com √™xito do",
        "location_text": "realizado em",
        "date_text": "no per√≠odo de",
        "workload_text": "com carga hor√°ria total de",
        "hours_text": "horas",
        "coordinator_title": "Coordenador do Evento",
        "director_title": "Diretor da Institui√ß√£o",
        "title_text": "CERTIFICADO DE PARTICIPA√á√ÉO"
    }
    
    # Salvar informa√ß√µes do certificado de exemplo
    auth_manager.salvar_codigo(
        codigo_autenticacao=codigo_autenticacao_exemplo,
        nome_participante=nome_exemplo,
        evento=evento_exemplo,
        data_evento=data_exemplo,
        local_evento=sample_data["local"],
        carga_horaria=sample_data["carga_horaria"]
    )
    
    # Listar temas dispon√≠veis
    available_themes = theme_manager.list_themes()
    
    if not available_themes:
        console.print("[red]‚ùå Nenhum tema dispon√≠vel.[/red]")
        input("\nPressione Enter para voltar...")
        return
    
    console.print(f"\n[green]‚úì Template carregado: {template_name}[/green]")
    console.print(f"[green]‚úì Temas encontrados: {len(available_themes)}[/green]")
    console.print(f"[cyan]Temas: {', '.join(available_themes)}[/cyan]\n")
    
    # Confirmar gera√ß√£o
    confirm = quiet_confirm(
        f"Deseja gerar {len(available_themes)} certificados (um para cada tema)?",
        default=True
    )
    
    if not confirm:
        console.print("[yellow]Opera√ß√£o cancelada.[/yellow]")
        return
    
    # Criar diret√≥rio de sa√≠da espec√≠fico para debug
    from datetime import datetime
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    debug_output_dir = os.path.join("output", f"debug_themes_{timestamp}")
    os.makedirs(debug_output_dir, exist_ok=True)
    
    console.print(f"\n[blue]üìÅ Diret√≥rio de sa√≠da: {debug_output_dir}[/blue]\n")
    
    # Gerar certificados para cada tema
    generated_files = []
    
    with console.status("[bold green]Gerando certificados com diferentes temas...") as status:
        for i, theme_name in enumerate(available_themes, 1):
            try:
                status.update(f"[bold green]Processando tema {i}/{len(available_themes)}: {theme_name}")
                
                # Carregar configura√ß√µes do tema
                theme_settings = theme_manager.load_theme(theme_name)
                
                if not theme_settings:
                    console.print(f"[yellow]‚ö†Ô∏è Aviso: Tema '{theme_name}' n√£o p√¥de ser carregado[/yellow]")
                    continue
                
                # Mesclar dados de exemplo com configura√ß√µes do tema
                merged_data = parameter_manager.merge_placeholders(sample_data.copy(), theme_name)
                
                # Renderizar template com dados
                try:
                    # Salvar template temporariamente
                    temp_template_name = f"temp_debug_{theme_name.replace(' ', '_').lower()}_{timestamp}.html"
                    temp_template_path = os.path.join("templates", temp_template_name)
                    
                    with open(temp_template_path, "w", encoding="utf-8") as f:
                        f.write(template_content)
                      # Gerar QR code adaptado ao tamanho do placeholder no template
                    qr_info = auth_manager.gerar_qrcode_adaptado(codigo_autenticacao_exemplo, template_content)
                    merged_data["qrcode_base64"] = qr_info["qrcode_base64"]
                    
                    # Renderizar template
                    html_content = template_manager.render_template(temp_template_name, merged_data)
                    
                    # Substituir o placeholder do QR code pelo QR code real
                    html_content = auth_manager.substituir_qr_placeholder(html_content, qr_info["qrcode_base64"])
                    
                    # Aplicar tema ao HTML
                    if theme_settings:
                        html_content = theme_manager.apply_theme_to_template(html_content, theme_settings)
                    
                    # Gerar nome do arquivo
                    safe_theme_name = theme_name.replace(" ", "_").replace("√£", "a").replace("√©", "e").replace("√¥", "o")
                    pdf_filename = f"certificado_tema_{safe_theme_name}.pdf"
                    pdf_path = os.path.join(debug_output_dir, pdf_filename)
                    
                    # Gerar PDF
                    pdf_generator.generate_pdf(html_content, pdf_path, orientation='landscape')
                    generated_files.append((pdf_path, theme_name))
                    
                    console.print(f"[green]‚úì[/green] {theme_name} ‚Üí {pdf_filename}")
                    
                except Exception as e:
                    console.print(f"[red]‚ùå Erro no tema '{theme_name}': {str(e)}[/red]")
                    
                finally:
                    # Limpar arquivo tempor√°rio
                    if 'temp_template_path' in locals() and os.path.exists(temp_template_path):
                        os.remove(temp_template_path)
                        
            except Exception as e:
                console.print(f"[red]‚ùå Erro geral no tema '{theme_name}': {str(e)}[/red")
    
    # Relat√≥rio final
    console.print(f"\n[bold green]üéâ Gera√ß√£o conclu√≠da![/bold green]")
    console.print(f"[green]‚úì[/green] Vers√£o do aplicativo: {APP_VERSION}")
    console.print(f"[{'green' if templates else 'yellow'}]{'‚úì' if templates else '‚ö†Ô∏è'}[/{'green' if templates else 'yellow'}] Templates: {len(templates) if templates else 0}")
    console.print(f"[{'green' if available_themes else 'yellow'}]{'‚úì' if available_themes else '‚ö†Ô∏è'}[/{'green' if available_themes else 'yellow'}] Temas: {len(available_themes) if available_themes else 0}")
    
    if generated_files:
        # Mostrar lista dos arquivos gerados
        console.print("[bold]Arquivos gerados:[/bold]")
        for pdf_path, theme_name in generated_files:
            filename = os.path.basename(pdf_path)
            console.print(f"  ‚Ä¢ [cyan]{filename}[/cyan] ({theme_name})")
        
        # Oferecer op√ß√µes adicionais
        console.print("\n[bold]Op√ß√µes adicionais:[/bold]")
        
        action = quiet_select(
            "O que deseja fazer agora?",
            choices=[
                "üìÅ Abrir diret√≥rio de sa√≠da",
                "üìä Criar arquivo ZIP com todos os certificados",
                "üëÅÔ∏è Abrir primeiro certificado",
                "‚Ü©Ô∏è Voltar ao menu"
            ],
            style=get_menu_style()
        )
        
        if action == "üìÅ Abrir diret√≥rio de sa√≠da":
            try:
                import subprocess
                os.startfile(debug_output_dir)  # Windows
            except AttributeError:
                try:
                    subprocess.call(["open", debug_output_dir])  # macOS
                except:
                    subprocess.call(["xdg-open", debug_output_dir])  # Linux
            console.print("[green]‚úì Diret√≥rio aberto[/green]")
            
        elif action == "üìä Criar arquivo ZIP com todos os certificados":
            zip_filename = f"debug_temas_{timestamp}.zip"
            zip_path = os.path.join(debug_output_dir, zip_filename)
            
            try:
                with console.status("[bold green]Criando arquivo ZIP..."):
                    zip_exporter.create_zip([pdf_path for pdf_path, _ in generated_files], zip_path)
                console.print(f"[green]‚úì ZIP criado: {zip_filename}[/green]")
            except Exception as e:
                console.print(f"[red]‚ùå Erro ao criar ZIP: {str(e)}[/red]")
                
        elif action == "üëÅÔ∏è Abrir primeiro certificado":
            if generated_files:
                first_pdf = generated_files[0][0]
                try:
                    import subprocess
                    os.startfile(first_pdf)  # Windows
                except AttributeError:
                    try:
                        subprocess.call(["open", first_pdf])  # macOS
                    except:
                        subprocess.call(["xdg-open", first_pdf])  # Linux
                console.print("[green]‚úì Certificado aberto[/green]")
    
    console.print("\n[dim]Pressione Enter para voltar ao menu...[/dim]")
    input()

def verify_authentication_code():
    """Verifica a autenticidade de um c√≥digo de certificado."""
    console.clear()
    console.print("[bold blue]== Verifica√ß√£o de Autenticidade de Certificado ==[/bold blue]\n")
    
    # Solicitar c√≥digo de autentica√ß√£o ou verifica√ß√£o
    code_type = quiet_select(
        "Tipo de c√≥digo que voc√™ possui:",
        choices=[
            "C√≥digo de autentica√ß√£o completo (32 caracteres)",
            "C√≥digo de verifica√ß√£o curto (8-9 caracteres)",
            "Voltar"
        ],
        style=get_menu_style()
    )
    
    if code_type == "Voltar":
        return
    
    # Solicitar o c√≥digo conforme o tipo selecionado
    if code_type == "C√≥digo de autentica√ß√£o completo (32 caracteres)":
        codigo = quiet_text("Digite o c√≥digo de autentica√ß√£o:").strip()
    else:
        codigo = quiet_text("Digite o c√≥digo de verifica√ß√£o:").strip()
    
    if not codigo:
        console.print("[yellow]Opera√ß√£o cancelada.[/yellow]")
        return
    
    # Verificar o c√≥digo
    with console.status("[bold green]Verificando c√≥digo..."):
        result = auth_manager.verificar_codigo(codigo)
    
    if result:
        console.print("[bold green]‚úì Certificado aut√™ntico![/bold green]\n")
        
        # Exibir detalhes do certificado
        table = Table(box=box.SIMPLE)
        table.add_column("Campo", style="cyan")
        table.add_column("Valor")
        
        for campo, valor in result.items():
            if campo not in ['codigo_verificacao', 'data_geracao']:  # Campos que n√£o precisam ser exibidos
                table.add_row(campo, str(valor))
        
        console.print(table)
        
        # Op√ß√µes adicionais
        options = quiet_select(
            "Op√ß√µes adicionais:",
            choices=[
                "Verificar outro c√≥digo",
                "Voltar ao menu"
            ],
            style=get_menu_style()
        )
        
        if options == "Verificar outro c√≥digo":
            verify_authentication_code()  # Recursivamente chama a mesma fun√ß√£o
        
    else:
        console.print("[bold red]‚ùå C√≥digo inv√°lido ou n√£o encontrado![/bold red]")
        console.print("\nPoss√≠veis causas:")
        console.print("‚Ä¢ O c√≥digo foi digitado incorretamente")
        console.print("‚Ä¢ O certificado n√£o existe no sistema")
        console.print("‚Ä¢ O certificado est√° em uma base de dados diferente")
        
        retry = quiet_confirm("Deseja tentar novamente?")
        if retry:
            verify_authentication_code()  # Recursivamente chama a mesma fun√ß√£o
    
    console.print("\n[dim]Pressione Enter para voltar ao menu...[/dim]")
    input()

def get_menu_style():
    """Retorna o estilo padr√£o para menus do questionary."""
    from questionary import Style
    
    return Style([
        ('qmark', 'fg:#ff9d00 bold'),
        ('question', 'bold'),
        ('answer', 'fg:#ff9d00 bold'),
        ('pointer', 'fg:#ff9d00 bold'),
        ('highlighted', 'fg:#ff9d00 bold'),
        ('selected', 'fg:#cc5454'),
        ('separator', 'fg:#cc5454'),
        ('instruction', ''),
        ('text', ''),
        ('disabled', 'fg:#858585 italic')
    ])


def settings_menu():
    """Menu de configura√ß√µes."""
    console.clear()
    console.print("[bold blue]== Configura√ß√µes ==[/bold blue]\n")
    
    choice = quiet_select(
        "O que voc√™ deseja configurar?",
        choices=[
            "üìÅ Diret√≥rios de trabalho",
            "üé® Apar√™ncia e tema",
            "üìä Par√¢metros de gera√ß√£o",
            "üîß Configura√ß√µes do sistema",
            "üíæ Salvar/carregar presets",
            "‚Ü©Ô∏è Voltar ao menu principal"
        ],
        style=get_menu_style()
    )
    
    if choice == "üìÅ Diret√≥rios de trabalho":
        configure_directories()
    elif choice == "üé® Apar√™ncia e tema":
        configure_appearance()
    elif choice == "üìä Par√¢metros de gera√ß√£o":
        configure_generation_parameters()
    elif choice == "üîß Configura√ß√µes do sistema":
        configure_system_settings()
    elif choice == "üíæ Salvar/carregar presets":
        manage_presets()
    elif choice == "‚Ü©Ô∏è Voltar ao menu principal":
        return


def configure_system_settings():
    """Configura√ß√µes gerais do sistema."""
    console.clear()
    console.print("[bold blue]== Configura√ß√µes do Sistema ==[/bold blue]\n")
    
    # Verificar status atual do modo debug
    debug_mode = parameter_manager.get_debug_mode()
    debug_status = "[green]ATIVADO[/green]" if debug_mode else "[red]DESATIVADO[/red]"
    
    console.print(f"[bold]Status atual do modo DEBUG:[/bold] {debug_status}\n")
    console.print("[dim]O modo DEBUG exibe op√ß√µes e informa√ß√µes adicionais para desenvolvedores e diagn√≥stico.[/dim]")
    console.print("[dim]Ativar este modo pode expor informa√ß√µes t√©cnicas e fun√ß√µes experimentais.[/dim]\n")
    
    # Op√ß√µes dispon√≠veis para configura√ß√µes do sistema
    choice = quiet_select(
        "O que voc√™ deseja configurar?",
        choices=[
            f"{'Desativar' if debug_mode else 'Ativar'} modo DEBUG",
            "‚Ü©Ô∏è Voltar"
        ],
        style=get_menu_style()
    )
    
    if choice == "Ativar modo DEBUG" or choice == "Desativar modo DEBUG":
        new_status = not debug_mode
        confirm_msg = "Tem certeza que deseja ATIVAR o modo DEBUG?" if new_status else "Tem certeza que deseja DESATIVAR o modo DEBUG?"
        
        confirm = quiet_confirm(confirm_msg)
        if confirm:
            result = parameter_manager.set_debug_mode(new_status)
            if result:
                status_msg = "[green]‚úì Modo DEBUG ATIVADO com sucesso![/green]" if new_status else "[yellow]‚úì Modo DEBUG DESATIVADO![/yellow]"
                console.print(status_msg)
                console.print("[dim]Esta configura√ß√£o ser√° mantida entre sess√µes do programa.[/dim]")
                
                if new_status:
                    console.print("\n[yellow]Aten√ß√£o: Fun√ß√µes de DEBUG agora est√£o vis√≠veis no menu principal.[/yellow]")
                    console.print("[yellow]Estas incluem:[/yellow]")
                    console.print("[dim]  ‚Ä¢ DEBUG: Comparar temas[/dim]")
                    console.print("[dim]  ‚Ä¢ DEBUG: Verificar sistema[/dim]")
            else:
                console.print("[bold red]Erro ao salvar configura√ß√£o![/bold red]")
        
        # Mostrar novamente o menu de configura√ß√µes do sistema
        console.print("\n[dim]Pressione Enter para continuar...[/dim]")
        input()
        configure_system_settings()
    
    elif choice == "‚Ü©Ô∏è Voltar":
        settings_menu()


def debug_system_check():
    """Fun√ß√£o de debug para verificar o sistema."""
    console.clear()
    console.print("[bold red]== DEBUG: Verifica√ß√£o do Sistema ==[/bold red]\n")
    
    console.print("[yellow]Esta ferramenta verifica o estado geral do sistema NEPEM Cert.[/yellow]\n")
    
    # Verificar diret√≥rios essenciais
    console.print("[bold]üìÅ Verificando diret√≥rios essenciais...[/bold]")
    
    directories = {
        "Templates": "templates",
        "Output": certificate_service.output_dir, 
        "Config": "config",
        "App": "app"
    }
    
    for name, path in directories.items():
        if os.path.exists(path):
            console.print(f"[green]‚úì[/green] {name}: {path}")
        else:
            console.print(f"[red]‚ùå[/red] {name}: {path} [red](n√£o encontrado)[/red]")
            try:
                os.makedirs(path, exist_ok=True)
                console.print(f"[yellow]  ‚Üí Diret√≥rio criado automaticamente[/yellow]")
            except Exception as e:
                console.print(f"[red]  ‚Üí Erro ao criar: {str(e)}[/red]")
    
    # Verificar templates dispon√≠veis
    console.print(f"\n[bold]üìÑ Verificando templates...[/bold]")
    templates = template_manager.list_templates()
    if templates:
        console.print(f"[green]‚úì[/green] {len(templates)} template(s) encontrado(s):")
        for template in templates[:5]:  # Mostrar apenas os primeiros 5
            console.print(f"[dim]  ‚Ä¢ {template}[/dim]")
        if len(templates) > 5:
            console.print(f"[dim]  ... e mais {len(templates) - 5} template(s)[/dim]")
    else:
        console.print("[yellow]‚ö†Ô∏è[/yellow] Nenhum template encontrado")
    
    # Verificar temas dispon√≠veis
    console.print(f"\n[bold]üé® Verificando temas...[/bold]")
    themes = theme_manager.list_themes()
    if themes:
        console.print(f"[green]‚úì[/green] {len(themes)} tema(s) encontrado(s):")
        for theme in themes:
            console.print(f"[dim]  ‚Ä¢ {theme}[/dim]")
    else:
        console.print("[yellow]‚ö†Ô∏è[/yellow] Nenhum tema encontrado")
    
    # Verificar configura√ß√µes de par√¢metros
    console.print(f"\n[bold]‚öôÔ∏è Verificando configura√ß√µes...[/bold]")
    try:
        institutional = parameter_manager.get_institutional_placeholders()
        defaults = parameter_manager.get_default_placeholders()
        
        console.print(f"[green]‚úì[/green] Par√¢metros institucionais: {len(institutional)} configurado(s)")
        console.print(f"[green]‚úì[/green] Par√¢metros padr√£o: {len(defaults)} configurado(s)")
        
        # Verificar arquivo de configura√ß√£o
        config_path = parameter_manager.config_file
        if os.path.exists(config_path):
            size = os.path.getsize(config_path)
            console.print(f"[green]‚úì[/green] Arquivo de configura√ß√£o: {config_path} ({size} bytes)")
        else:
            console.print(f"[yellow]‚ö†Ô∏è[/yellow] Arquivo de configura√ß√£o n√£o encontrado: {config_path}")
            
    except Exception as e:
        console.print(f"[red]‚ùå[/red] Erro ao verificar configura√ß√µes: {str(e)}")
    
    # Verificar conectividade
    console.print(f"\n[bold]üåê Verificando conectividade...[/bold]")
    try:
        conn_info = connectivity_manager.get_connection_status()
        status_color = {
            "Conectado": "green",
            "Desconectado": "red", 
            "Aguardando": "yellow"
        }.get(conn_info["status"], "yellow")
        
        console.print(f"[{status_color}]‚óè[/{status_color}] Status: {conn_info['status']}")
        if "last_check" in conn_info:
            console.print(f"[dim]  √öltima verifica√ß√£o: {conn_info['last_check']}[/dim]")
            
    except Exception as e:
        console.print(f"[red]‚ùå[/red] Erro ao verificar conectividade: {str(e)}")
    
    # Verificar depend√™ncias do sistema
    console.print(f"\n[bold]üì¶ Verificando depend√™ncias...[/bold]")
    
    dependencies = [
        ("pandas", "Processamento de CSV"),
        ("rich", "Interface de usu√°rio"),
        ("questionary", "Menus interativos"),
        ("jinja2", "Templates"),
        ("xhtml2pdf", "Gera√ß√£o de PDF"),
        ("qrcode", "C√≥digos QR"),
        ("PIL", "Processamento de imagens")
    ]
    
    for module_name, description in dependencies:
        try:
            __import__(module_name)
            console.print(f"[green]‚úì[/green] {module_name}: {description}")
        except ImportError:
            console.print(f"[red]‚ùå[/red] {module_name}: {description} [red](n√£o encontrado)[/red]")
    
    # Informa√ß√µes do sistema
    console.print(f"\n[bold]üíª Informa√ß√µes do sistema...[/bold]")
    import platform
    console.print(f"[cyan]Python:[/cyan] {platform.python_version()}")
    console.print(f"[cyan]Sistema:[/cyan] {platform.system()} {platform.release()}")
    console.print(f"[cyan]Arquitetura:[/cyan] {platform.machine()}")
    
    # Resumo final
    console.print(f"\n[bold blue]üìä Resumo da verifica√ß√£o:[/bold blue]")
    console.print(f"[green]‚úì[/green] Sistema operacional: {platform.system()}")
    console.print(f"[green]‚úì[/green] Vers√£o do aplicativo: {APP_VERSION}")
    console.print(f"[{'green' if templates else 'yellow'}]{'‚úì' if templates else '‚ö†Ô∏è'}[/{'green' if templates else 'yellow'}] Templates: {len(templates) if templates else 0}")
    console.print(f"[{'green' if themes else 'yellow'}]{'‚úì' if themes else '‚ö†Ô∏è'}[/{'green' if themes else 'yellow'}] Temas: {len(themes) if themes else 0}")
    
    console.print("\n[dim]Esta verifica√ß√£o ajuda a identificar problemas de configura√ß√£o e depend√™ncias.[/dim]")
    console.print("[dim]Pressione Enter para voltar ao menu...[/dim]")
    input()


def manage_templates_menu():
    """Menu para gerenciamento de templates."""
    console.clear()
    console.print("[bold blue]== Gerenciamento de Templates ==[/bold blue]\n")
    
    choice = quiet_select(
        "O que voc√™ deseja fazer?",
        choices=[
            "üìÑ Listar templates",
            "üì• Importar template",
            "‚úèÔ∏è Editar template",
            "üóëÔ∏è Excluir template",
            "üëÅÔ∏è Visualizar template",
            "üß™ Testar gera√ß√£o de certificado",
            "üìä Visualizar dados CSV",
            "‚Ü©Ô∏è Voltar ao menu principal"
        ],
        style=get_menu_style()
    )
    
    if choice == "üìÑ Listar templates":
        list_templates()
    elif choice == "üì• Importar template":
        import_template()
    elif choice == "‚úèÔ∏è Editar template":
        edit_template()
    elif choice == "üóëÔ∏è Excluir template":
        delete_template()
    elif choice == "üëÅÔ∏è Visualizar template":
        preview_template()
    elif choice == "üß™ Testar gera√ß√£o de certificado":
        test_certificate_generation()
    elif choice == "üìä Visualizar dados CSV":
        preview_imported_data()
    elif choice == "‚Ü©Ô∏è Voltar ao menu principal":
        return
    
    # Retornar ao menu de templates ap√≥s cada opera√ß√£o
    manage_templates_menu()


def show_sync_history_stub():
    """Placeholder for showing synchronization history."""
    console.clear()
    console.print("[bold blue]== Hist√≥rico de Sincroniza√ß√£o ==[/bold blue]\n")
    console.print("[yellow]Esta fun√ß√£o ainda n√£o est√° implementada.[/yellow]")
    console.print("\n[dim]Pressione Enter para voltar ao menu...[/dim]")
    input()
    connectivity_menu() # Return to connectivity menu


def connectivity_menu():
    """Menu de conectividade e sincroniza√ß√£o."""
    console.clear()
    console.print("[bold blue]== Sincroniza√ß√£o e Conectividade ==[/bold blue]\n")
    
    # Verificar status da conex√£o
    status_info = connectivity_manager.get_connection_status()
    status_color = {
        "Conectado": "green",
        "Desconectado": "red",
        "Aguardando": "yellow"
    }.get(status_info["status"], "yellow")
    
    console.print(f"[bold]Status atual:[/bold] [{status_color}]{status_info['status']}[/{status_color}]")
    console.print(f"[bold]√öltima verifica√ß√£o:[/bold] {status_info.get('last_check', 'Nunca')}")
    
    choice = quiet_select(
        "O que voc√™ deseja fazer?",
        choices=[
            "üîÑ Verificar conex√£o",
            "‚öôÔ∏è Configurar servidor",
            "üì§ Enviar Certificados Gerados",
            "üì• Baixar Templates do Servidor",
            "üìã Hist√≥rico de sincroniza√ß√£o", 
            "‚Ü©Ô∏è Voltar ao menu principal"
        ],
        style=get_menu_style()
    )
    
    if choice == "üîÑ Verificar conex√£o":
        console.clear()
        console.print("[bold blue]== Status da Conex√£o ==[/bold blue]\n")
        
        if not connectivity_manager.config.get("server_url"):
            console.print("[yellow]URL do servidor n√£o configurada. Configure o servidor primeiro.[/yellow]")
            console.print("\n[dim]Pressione Enter para voltar ao menu...[/dim]")
            input()
            connectivity_menu()
            return

        with console.status("[bold green]Verificando conex√£o com o servidor...", spinner="dots"):
            result = connectivity_manager.check_connection() 
        
        status_color = "green" if result.get("status") == "Conectado" else "red"
        console.print(f"Status: [{status_color}]{result.get('status', 'Desconhecido')}[/{status_color}]")
        console.print(f"Mensagem: {result.get('message', 'N/A')}")
        console.print(f"Hor√°rio da Verifica√ß√£o: {result.get('timestamp', 'N/A')}")
        console.print(f"URL do Servidor: {connectivity_manager.config.get('server_url', 'N√£o configurada')}")

        console.print("\n[dim]Pressione Enter para voltar ao menu...[/dim]")
        input()
        connectivity_menu()
    
    elif choice == "‚öôÔ∏è Configurar servidor":
        configure_remote_server()
        connectivity_menu()
    
    elif choice == "üì§ Enviar Certificados Gerados":
        upload_certificates_ui()
        connectivity_menu()

    elif choice == "üì• Baixar Templates do Servidor": 
        download_templates_ui() 
        # connectivity_menu() is called at the end of download_templates_ui
    
    elif choice == "üìã Hist√≥rico de sincroniza√ß√£o":
        show_sync_history_stub()
        # connectivity_menu() is called at the end of show_sync_history_stub
    
    elif choice == "‚Ü©Ô∏è Voltar ao menu principal":
        return


def show_help():
    """Exibe a ajuda do sistema."""
    console.clear()
    console.print("[bold blue]== Ajuda do NEPEM Cert ==[/bold blue]\n")
    
    help_content = """
[bold]NEPEM Cert - Gerador de Certificados em Lote[/bold]

[bold cyan]Funcionalidades Principais:[/bold cyan]
‚Ä¢ [green]Gera√ß√£o de Certificados:[/green] Crie certificados em lote a partir de templates HTML e dados CSV
‚Ä¢ [green]Gerenciamento de Templates:[/green] Importe, edite e gerencie templates de certificados
‚Ä¢ [green]Temas Personalizados:[/green] Aplique diferentes estilos visuais aos seus certificados
‚Ä¢ [green]Configura√ß√µes Flex√≠veis:[/green] Configure valores padr√£o, institucionais e espec√≠ficos por tema

[bold cyan]Como Usar:[/bold cyan]
1. [yellow]Prepare seu arquivo CSV[/yellow] com uma coluna contendo os nomes dos participantes
2. [yellow]Importe um template HTML[/yellow] ou use um dos templates existentes
3. [yellow]Configure os par√¢metros[/yellow] institucionais e valores padr√£o
4. [yellow]Gere os certificados[/yellow] informando os dados do evento

[bold cyan]Formatos Suportados:[/bold cyan]
‚Ä¢ [green]Templates:[/green] Arquivos HTML com placeholders no formato {{ placeholder }}
‚Ä¢ [green]Dados:[/green] Arquivos CSV com encoding UTF-8
‚Ä¢ [green]Sa√≠da:[/green] Certificados em PDF e opcionalmente empacotados em ZIP

[bold cyan]Placeholders Dispon√≠veis:[/bold cyan]
‚Ä¢ {{ nome }} - Nome do participante
‚Ä¢ {{ evento }} - Nome do evento
‚Ä¢ {{ data }} - Data do evento
‚Ä¢ {{ local }} - Local do evento
‚Ä¢ {{ carga_horaria }} - Carga hor√°ria do evento
‚Ä¢ {{ codigo_autenticacao }} - C√≥digo √∫nico de autentica√ß√£o
‚Ä¢ {{ codigo_verificacao }} - C√≥digo de verifica√ß√£o
‚Ä¢ {{ data_emissao }} - Data de emiss√£o do certificado

[bold cyan]Dicas Importantes:[/bold cyan]
‚Ä¢ Use encoding UTF-8 nos arquivos CSV para evitar problemas com acentos
‚Ä¢ Templates HTML devem ser compat√≠veis com a biblioteca de gera√ß√£o de PDF
‚Ä¢ Evite elementos CSS complexos como flexbox ou posicionamento absoluto
‚Ä¢ Configure valores institucionais para reutilizar informa√ß√µes comuns

[bold [bold cyan]Suporte:[/bold cyan]
‚Ä¢ Vers√£o atual: v1.1.0
‚Ä¢ Para problemas t√©cnicos, ative o modo DEBUG nas configura√ß√µes
‚Ä¢ Templates de exemplo est√£o dispon√≠veis na pasta 'templates'
"""
    
    console.print(help_content)
    
    input("\n[dim]Pressione Enter para voltar ao menu principal...[/dim]")

def debug_generate_certificate_for_theme(tema_nome):
    """
    Gera um certificado de teste para um tema espec√≠fico.
    
    Args:
        tema_nome (str): Nome do tema para testar
        
    Returns:
        tuple: (sucesso, caminho_do_arquivo, erro)
    """
    try:
        from app.template_manager import TemplateManager
        from app.theme_manager import ThemeManager
        from app.pdf_generator import PDFGenerator
        from app.parameter_manager import ParameterManager
        from app.authentication_manager import AuthenticationManager
        
        # Inicializar gerenciadores
        template_manager = TemplateManager()
        theme_manager = ThemeManager()
        pdf_generator = PDFGenerator()
        param_manager = ParameterManager()
        auth_manager = AuthenticationManager()
        
        # Carregar template padr√£o
        template_name = "certificado_v1_basico.html"
        template_content = template_manager.load_template(template_name)
        
        if not template_content:
            return False, None, f"Template '{template_name}' n√£o encontrado"
        
        # Carregar tema
        theme_settings = theme_manager.load_theme(tema_nome)
        if not theme_settings:
            return False, None, f"Tema '{tema_nome}' n√£o encontrado"
        
        # Aplicar tema ao template
        themed_template = theme_manager.apply_theme_to_template(template_content, theme_settings)
        
        # Dados de teste
        dados_teste = {
            "nome": "Jo√£o da Silva Santos",
            "evento": f"Workshop NEPEM - Tema {tema_nome}",
            "local": "Laborat√≥rio de Sistemas de Conhecimento - UFSC",
            "data": "10 de Janeiro de 2025",
            "carga_horaria": "40 horas",
            "coordenador": "Prof. Dr. Ricardo Miranda Barcia",
            "cidade": "Florian√≥polis",
            "data_emissao": "10/01/2025"
        }
        
        # Gerar c√≥digo de autentica√ß√£o
        auth_code = auth_manager.gerar_codigo_autenticacao(dados_teste["nome"], dados_teste["evento"])
        dados_teste["codigo_verificacao"] = auth_code
        dados_teste["url_verificacao"] = "https://nepemufsc.com/verificar"
        
        # Mesclar com par√¢metros do sistema
        dados_finais = param_manager.merge_placeholders(dados_teste, tema_nome)
        
        # Renderizar template
        html_renderizado = template_manager.render_template_from_string(themed_template, dados_finais)
        
        # Gerar QR code e substituir placeholder
        qrcode_base64 = auth_manager.gerar_qrcode_base64(auth_code)
        html_final = auth_manager.substituir_qr_placeholder(html_renderizado, qrcode_base64)
        
        # Gerar PDF
        nome_arquivo = f"debug_{tema_nome.replace(' ', '_').lower()}.pdf"
        caminho_pdf = pdf_generator.generate_pdf(html_final, nome_arquivo, orientation="landscape")
        
        return True, caminho_pdf, None
        
    except Exception as e:
        return False, None, str(e)
